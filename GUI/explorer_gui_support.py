#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 7.5
#  in conjunction with Tcl version 8.6
#    Sep 09, 2022 03:32:08 PM PDT  platform: Windows NT
#    Sep 09, 2022 03:40:47 PM PDT  platform: Windows NT
#    Oct 03, 2022 06:13:28 PM PDT  platform: Windows NT
#    Oct 03, 2022 07:32:36 PM PDT  platform: Windows NT
#    Oct 04, 2022 02:20:17 PM PDT  platform: Windows NT

import sys
import io
from pathlib import Path
from ast import literal_eval
import re
from inspect import signature
import tkinter as tk
import tkinter.ttk as ttk
import tkinter.filedialog as fd
from tkinter.constants import *
from matplotlib.figure import Figure
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import numpy as np
import pandas as pd
import seaborn as sns
from cefpython3 import cefpython as cef

import explorer_gui
import cef_embedded

'''
Main entry point for the application.
'''
def main(*args):
    global root
    root = tk.Tk()
    root.protocol( 'WM_DELETE_WINDOW' , root.destroy)
    # Creates a toplevel widget.
    global _top1, _w1, _data
    _top1 = root
    _w1 = explorer_gui.MainWindow(_top1)
    _data = {
        'figure': None,
        'df': None,
        'curr_file': '',
        'import_opts_str': '',
        'plot_options': dict(),
        'hdr_idx': (),
        'df_pairplot': pd.DataFrame()
        }
    sys.excepthook = cef.ExceptHook
    cef.Initialize()
    root.mainloop()
    cef.Shutdown() 

'''
File import dialog functions
'''
def import_window():
    global _top2, _w2
    _top2 = tk.Toplevel(root)
    _w2 = explorer_gui.ImportWindow(_top2)
    _w2.input_file_str.set(_data['curr_file'])
    _w2.import_kwargs_str.set(_data['import_opts_str'])
    _w2.load_func = pd.read_csv #TBI: other formats
    _w2.valid_kwargs = True #Must be true because only valid values are stored
    _w2.valid_file = validate_input_file(_w2.input_file_str.get())
    #To initialize import_kwargs_dict
    _w2.import_kwargs_dict = ()
    _ = validate_import_kwargs(_w2.import_kwargs_str.get())

def open_file_chooser(*args):
    filetypes = (
        ('Comma-separated value','*.csv'),
        ('All files','*'))
    origfilename = _w2.input_file_str.get()
    filename = fd.askopenfilename(parent=_top2, title='Select data file',
        filetypes=filetypes, initialfile=origfilename)
    
    _w2.input_file_str.set(filename)
    validate_input_file(filename, origfilename)

def validate_input_file(*args):
    try:
        path = Path(args[0])
        if not path.is_file():
            raise OSError(f'String {path} does not point to a file')
        
        if _w2.valid_kwargs: #only if kwargs are also valid
            _w2.ImportButton['state'] = tk.NORMAL
        _w2.InputFileField['foreground'] = 'black'
        _w2.valid_file = True
        return True
    except OSError:
        _w2.ImportButton['state'] = tk.DISABLED
        _w2.InputFileField['foreground'] = 'red'
        _w2.valid_file = False
        return False

def validate_import_kwargs(*args):
    input_str = args[0]
    
    try:
        kwargs_dict = dict()
        if input_str is not None and input_str != '':
            kwargs_dict = dict((k, literal_eval(v)) 
                              for k,v in (kwarg.split('=') 
                                          for kwarg in re.split('[, ]+',
                                                                input_str)))
            params = signature(_w2.load_func).parameters
            
            for key in kwargs_dict.keys():
                if key not in params:
                    raise TypeError(
                        "Function {fname} does not take argument {key}".format(
                            fname=_w2.load_func.__name__, key=key))
        
        if _w2.valid_file: #only if filename is also valid
            _w2.ImportButton['state'] = tk.NORMAL
        _w2.ImportKwargsField['foreground'] = 'black'
        _w2.import_kwargs_dict = kwargs_dict
        _data['import_opts_str'] = input_str
        _w2.valid_kwargs = True
        return True
    except Exception as err:
        _w2.ImportButton['state'] = tk.DISABLED
        _w2.ImportKwargsField['foreground'] = 'red'
        tk.messagebox.showerror('Invalid Import Kwargs',err,parent=_top2)
        _w2.import_kwargs_dict = dict()
        _data['import_opts_str'] = ''
        _w2.valid_kwargs = False
        return False

def import_file():
    filename = _w2.input_file_str.get()
    opts = _w2.import_kwargs_dict
    _data['df'] = _w2.load_func(filename, **opts)
    _top2.withdraw()
    _data['curr_file'] = filename
    set_header_list_default()

def import_cancel():
    _top2.withdraw()

'''
PairPlot tab functions
'''
def set_header_list_default():
    _w1.HeaderList.delete(0,tk.END)
    _data['plot_options'] = dict()
    _data['hdr_sel'] = ()
    _data['df_pairplot'] = pd.DataFrame()
    _data['df_pairplot'].index = _data['df'].index
    
    for col in _data['df'].columns:
        _w1.HeaderList.insert(tk.END,str(col))
        if _data['df'][col].dtype == 'object':
            _data['plot_options'][col] = 'exclude'
        elif _data['df'][col].dtype == 'category':
            _data['plot_options'][col] = 'categorical'
            _data['df_pairplot'][col] = _data['df'][col]
        else:
            _data['plot_options'][col] = 'linear'
            _data['df_pairplot'][col] = _data['df'][col]

def header_select(event):
    idx = event.widget.curselection()
    _data['hdr_sel'] = idx
    if len(idx) > 0:
        _w1.PlotOptionMenu.set(_data['plot_options'][event.widget.get(idx[0])])

def plot_option_changed(event):
    opt = event.widget.get()
    selidx = _data['hdr_sel']
    selhdrs = [_w1.HeaderList.get(idx) for idx in selidx]
    
    # for idx in selidx:
    #     selhdrs.append(_w1.HeaderList.get(idx))
    _data['plot_options'].update({sel:opt for sel in selhdrs})
    
    #Special case: set column as index and drop from header list
    if opt == 'index':
        _data['df'].set_index(selhdrs, drop=True, inplace=True, 
                              verify_integrity=True)
        _data['df_pairplot'].index = _data['df'].index
        _ = [_data['plot_options'].pop(sel) for sel in selhdrs]
        _data['df_pairplot'].drop(selhdrs,axis=1,inplace=True,errors='ignore')
        _data['hdr_sel'] = ()
        for idx in selidx[::-1]: #reverse order to avoid changing index mid-op
            _w1.HeaderList.delete(idx)
    elif opt == 'linear' or opt == 'categorical':
        _data['df_pairplot'][selhdrs] = _data['df'][selhdrs]
    elif opt == 'log base 10':
        with np.errstate(divide='ignore', invalid='ignore'):
            _data['df_pairplot'][selhdrs] = np.log10(_data['df'][selhdrs])
    elif opt == 'natural log':
        with np.errstate(divide='ignore', invalid='ignore'):
            _data['df_pairplot'][selhdrs] = np.log(_data['df'][selhdrs])
    elif opt == 'square root':
        with np.errstate(divide='ignore', invalid='ignore'):
            _data['df_pairplot'][selhdrs] = np.sqrt(_data['df'][selhdrs])
    else:
        _data['df_pairplot'].drop(selhdrs,axis=1,inplace=True,errors='ignore')

def create_pairplot(*args):
    cats = [col for col,opt in _data['plot_options'].items() \
            if opt == 'categorical']
    if len(cats) > 0:
        hue = cats[0]
    else:
        hue = None
    
    fig = sns.pairplot(data=_data['df_pairplot'], hue=hue).figure
    
    if _data['figure'] is not None:
        _data['figure'].destroy()
        _data['figure'] = None
    
    canvas = FigureCanvasTkAgg(fig, master=_w1.PairPlotFrame)
    canvas.draw()
    _data['figure'] = canvas.get_tk_widget()
    _data['figure'].pack(side=tk.TOP, fill=tk.BOTH, expand=1)

if __name__ == '__main__':
    '''
    Start-up for execution directly from this file
    '''
    explorer_gui.start_up()

## This is how you plot a regular pyplot figure in the frame
# fig = Figure()
# ax = fig.add_subplot(111)
# ax.plot(_data['df']['horsepower'],_data['df']['mpg'],'k.')

## This is how you embed a browser frame
# main_frame = cef_embedded.MainFrame(_w1.BrowserFrame)
# main_frame.update()
# # main_frame.event_generate("<Configure>")
# browser=main_frame.get_browser()
# browser.LoadUrl('https://www.google.com/')

## This is how to display info in a label
# str_buf = io.StringIO()
# _data['df'].info(verbose=True, buf=str_buf)
# # print(_data['df'].describe(), file=str_buf)
# _w1.Label1Text.set(str_buf.getvalue())





